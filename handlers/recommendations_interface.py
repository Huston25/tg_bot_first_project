"""–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"""


import logging

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from services.open_ai import client, get_recommendation_response

logger = logging.getLogger(__name__)
TYPE, ORIGIN, GENRE, MOOD, GOAL, RECOMMENDING = range(6)

async def recc_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /recommendation"""
    return await recc_start(update, context)

async def recc_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        keyboard = [
        [InlineKeyboardButton("üìñ –ö–Ω–∏–≥–∞", callback_data="book")],
        [InlineKeyboardButton("üé¨ –§–∏–ª—å–º", callback_data="movie")],
        [InlineKeyboardButton("üì∫ –°–µ—Ä–∏–∞–ª", callback_data="series")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.message:
            await update.message.reply_text(
                "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –∫–Ω–∏–≥—É, —Ñ–∏–ª—å–º –∏–ª–∏ —Å–µ—Ä–∏–∞–ª –ø–æ–¥ —Ç–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. \n–¢–æ–ª—å–∫–æ —Å–∫–∞–∂–∏:",
                reply_markup=reply_markup
            )
        elif update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.message.reply_text(
                "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –∫–Ω–∏–≥—É, —Ñ–∏–ª—å–º –∏–ª–∏ —Å–µ—Ä–∏–∞–ª –ø–æ–¥ —Ç–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. \n–¢–æ–ª—å–∫–æ —Å–∫–∞–∂–∏:",
                reply_markup=reply_markup
            )
        logger.info('–û—Ç–≤–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π')
        return TYPE

    except Exception as e:
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π')
        return -1



async def type_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    query = update.callback_query
    await query.answer()

    context.user_data['type'] = query.data
    context.user_data["previous_recommendations"] = []

    keyboard = [
        [InlineKeyboardButton("–†—É—Å—Å–∫–æ–µ", callback_data="russian")],
        [InlineKeyboardButton("–ó–∞—Ä—É–±–µ–∂–Ω–æ–µ", callback_data="foreign")],
        [InlineKeyboardButton("–ù–µ –≤–∞–∂–Ω–æ", callback_data="any")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ:", reply_markup=reply_markup)
    logger.info('–û—Ç–≤–µ—Ç –æ—Ç type')
    return ORIGIN


async def origin_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['origin'] = query.data

    await query.edit_message_text("–ö–∞–∫–æ–π –∂–∞–Ω—Ä —Ç—ã —Ö–æ—á–µ—à—å?")
    return GENRE


async def genre_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["genre"] = update.message.text

    await update.message.reply_text("–ö–∞–∫–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç—ã —Ö–æ—á–µ—à—å? (–ù–∞–ø—Ä–∏–º–µ—Ä: –≤–µ—Å–µ–ª–æ–µ, –≥—Ä—É—Å—Ç–Ω–æ–µ, –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–æ–µ)")

    return MOOD


async def mood_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["mood"] = update.message.text

    await update.message.reply_text("–ö–∞–∫–∞—è —Ü–µ–ª—å? (–û—Ç–¥–æ—Ö–Ω—É—Ç—å, –∑–∞–¥—É–º–∞—Ç—å—Å—è, –ø–æ—Å–º–µ—è—Ç—å—Å—è)")
    return GOAL

async def goal_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["goal"] = update.message.text
    await update.message.reply_text("–í—ã–±–∏—Ä–∞—é, —á—Ç–æ —Ç–µ–±–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å...")

    user_data = context.user_data

    try:
        recommendation = await get_recommendation_response(
            user_data['type'],
            user_data['origin'],
            user_data['genre'],
            user_data['mood'],
            user_data['goal']
        )

        context.user_data.setdefault("previous_recommendations", [])
        context.user_data["previous_recommendations"].append(recommendation.strip())

        await update.message.reply_text(recommendation)

        logger.info('–û—Ç–≤–µ—Ç –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º –∫–Ω–∏–≥ –∏ —Ñ–∏–ª—å–º–∞–º –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ')
        keyboard = [
            [InlineKeyboardButton("–ï—â—ë –≤–∞—Ä–∏–∞–Ω—Ç—ã", callback_data="more_recommendation")],
            [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text("–•–æ—á–µ—à—å –µ—â–µ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?", reply_markup=reply_markup)
        return RECOMMENDING

    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        return ConversationHandler.END



async def recommend_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    logger.info('–ó–∞—à–ª–∏ –≤ recommend_item')

    query = update.callback_query
    await query.answer()

    u = context.user_data

    keyboard = [
        [InlineKeyboardButton("–ï—â—ë –≤–∞—Ä–∏–∞–Ω—Ç—ã", callback_data="more_recommendation")],
        [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]

    reply_markup= InlineKeyboardMarkup(keyboard)

    if query.data == "more_recommendation":
        logger.info('–µ—â–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')
        used = context.user_data.get("previous_recommendations", [])
        recommendation = await get_recommendation_response(
            u["type"],
            u["origin"],
            u["genre"],
            u["mood"],
            u["goal"],
            used
            )
        context.user_data["previous_recommendations"].append(recommendation.strip())

        try:
            await query.message.reply_text(recommendation, reply_markup=reply_markup, parse_mode='HTML')

        except Exception as e:
            await query.message.reply_text(
                text=recommendation,

            )
            await query.delete_message()
        return RECOMMENDING

    elif query.data == "main_menu":
        context.user_data.clear()
        await recc_command(update, context)
        return -1




async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):

    await update.message.reply_text("–ù—É —Ç—ã —ç—Ç–æ, –∑–∞—Ö–æ–¥–∏ –µ—Å–ª–∏ —á–µ!")
    return ConversationHandler.END