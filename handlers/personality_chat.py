import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from handlers.basic import start
from handlers.chatgpt_interface import WAITING_FOR_MESSAGE
from services.open_ai import get_personality_response
from data.personality import get_personality_keyboard, get_personality_data
import os


logger = logging.getLogger(__name__)

SELECTING_PERSONALITY, CHATTING_WITH_PERSONALITY = range(2)

async def talk_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await talk_start(update, context)

async def talk_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        image_path = 'data/images/personality.jpg'
        message_text = (
            "üë• <b>–î–∏–∞–ª–æ–≥ —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —Å –∫–µ–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å:\n\n"
            '<b>üöÄ–ò–ª–æ–Ω –ú–∞—Å–∫</b>\n\n'
            '<b>üéì–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä</b>\n\n'
            '<b>üè°–ë–∏–ª—å–±–æ –ë–µ–≥–≥–∏–Ω—Å</b>\n\n'
            '–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—á–Ω–æ—Å—Ç—å:'

        )
        keyboard = get_personality_keyboard()
        if update.callback_query:
            if os.path.exists(image_path):
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å —Ñ–æ—Ç–æ
                await update.callback_query.message.delete()
                with open(image_path, 'rb') as photo:
                    await context.bot.send_photo(
                        chat_id=update.callback_query.message.chat_id,
                        photo=photo,
                        caption=message_text,
                        parse_mode='HTML',
                        reply_markup=keyboard
                    )
            else:
                await update.callback_query.edit_message_text(
                    message_text,
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
            await update.callback_query.answer()
        else:
            # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–æ–º–∞–Ω–¥–∞ /talk)
            if os.path.exists(image_path):
                with open(image_path, 'rb') as photo:
                    await update.message.reply_photo(
                        photo=photo,
                        caption=message_text,
                        parse_mode='HTML',
                        reply_markup=keyboard
                    )
            else:
                await update.message.reply_text(
                    message_text,
                    parse_mode='HTML',
                    reply_markup=keyboard
                )

        return SELECTING_PERSONALITY
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–∏–∞–ª–æ–≥–∞ —Å –ª–∏—á–Ω–æ—Å—Ç—è–º–∏ {e}")
        error_text = '–ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
        if update.callback_query:
            await update.callback_query.edit_message_text(error_text)
        else:
            await update.message.reply_text(error_text)

        return -1

async def personality_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        personality_key = query.data.replace("personality_", "")
        personality = get_personality_data(personality_key)

        if not personality:
            if query.message.photo:
                await query.edit_message_caption("‚ùå –û—à–∏–±–∫–∞: –ª–∏—á–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ª–∏—á–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return -1


        context.user_data['current_personality'] = personality_key
        context.user_data['personality_data'] = personality

        message_text = (
            f"{personality['emoji']} <b>–î–∏–∞–ª–æ–≥ —Å {personality['name']}</b>\n\n"
            f"–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ {personality['name']}. –î–∞–≤–∞–π –ø–æ–±–æ–ª—Ç–∞–µ–º?\n\n"
        )

        if query.message.photo:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º caption
            await query.edit_message_caption(
                caption=message_text,
                parse_mode='HTML'
            )
        else:
            # –ï—Å–ª–∏ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            await query.edit_message_text(
                text=message_text,
                parse_mode='HTML'
            )

        return WAITING_FOR_MESSAGE

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ª–∏—á–Ω–æ—Å—Ç–∏: {e}")
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
            if query.message.photo:
                await query.edit_message_caption("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            else:
                await query.edit_message_text("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        except Exception:
            # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
        return -1



async def handle_personality_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_message = update.message.text
        personality_key = context.user_data.get('current_personality')
        personality_data = context.user_data.get('personality_data')

        if not personality_key or not personality_data:
            await update.message.reply_text(
                '–õ–∏—á–Ω–æ—Å—Ç—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /talk –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞'
            )
            return -1

        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action='typing')

        processing_msg = await update.message.reply_text(
            f"{personality_data['emoji']}{personality_data['name']} –ø–µ—á–∞—Ç–∞–µ—Ç..."
        )

        personality_response = await get_personality_response(user_message, personality_data['prompt'])

        keyboard = [
            [InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥', callback_data='continue_chat')],
            [InlineKeyboardButton('–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –ª–∏—á–Ω–æ—Å—Ç—å', callback_data='change_personality')],
            [InlineKeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥', callback_data='finish_chat')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await processing_msg.delete()
        await update.message.reply_text(personality_response, reply_markup=reply_markup)

        return CHATTING_WITH_PERSONALITY

    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –ª–∏—á–Ω–æ—Å—Ç–∏ {e}")
        await update.message.reply_text(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.  '
        )
        return CHATTING_WITH_PERSONALITY


async def handle_personality_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):

    query = update.callback_query
    await query.answer()

    if query.data == 'continue_chat':
        personality_data = context.user_data.get('personality_data')
        if personality_data:
            await query.edit_message_text(
                f"{personality_data['emoji']}<b>–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä —Å {personality_data['name']}</b>\n\n"
                '–ü–∏—à–∏, –æ—Ç–≤–µ—á—É –Ω–∞ –≤—Å–µ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã: ',
                parse_mode='HTML'
            )
            return CHATTING_WITH_PERSONALITY
        return CHATTING_WITH_PERSONALITY

    elif query.data == 'change_personality':
        return await talk_start(update, context)

    elif query.data == 'finish_chat':
        context.user_data.pop('current_personality', None)
        context.user_data.pop('personality_data',None)

        await start(update, context)
        return -1